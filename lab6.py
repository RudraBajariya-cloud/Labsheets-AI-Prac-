# -*- coding: utf-8 -*-
"""Lab6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rby8VZ2ktfeQf2vVw4-Fv20eiGxZ8TN_
"""

!pip install python-constraint

#List of problems to solve today:
#1. Magic square problem
#2. Map Colouring
#3. Map Colouring with File (Homework)

from constraint import *
n = 4
problem = Problem()

#Creation of domain and variables
problem.addVariables(range(0, n*n), range(1, n*n + 1))

#Addition of uniqueness constraint
problem.addConstraint(AllDifferentConstraint(), range(0, n*n))

exactSum = (n*((n*n)+1))/2

#Addition of row-sum constraint
for row in range(n):
  problem.addConstraint(ExactSumConstraint(exactSum), [row * n + i for i in range(n)])

#Addition of column-sum constraint
for column in range(n):
  problem.addConstraint(ExactSumConstraint(exactSum), [column + n * i for i in range(n)])

solution = problem.getSolution()
print(len(solution))
print(solution)
#print(solution)

def printMagicSquare(solution, n):
  for i in range(0, n):
    for j in range(0, n):
      key = (n * i) + j
      print(solution[key], end="\t")
    print("\n")

printMagicSquare(solution, n)

#Map of Australia, we have the following variables - WA, SA, Q, NSW, NT, T, V
#The domains are going to be from {RED, BLUE, GREEN}
#Constraints - WA!=NT, WA!=SA, ... ... ...

mapColouringProblem = Problem()
colourList = ["RED", "GREEN", "BLUE"]
regionsList = ["WA","NT","SA","Q","NSW","V","T"]
mapColouringProblem.addVariables(regionsList, colourList)

mapColouringProblem.addConstraint(AllDifferentConstraint(),["WA", "SA"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["SA", "NT"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["SA", "Q"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["SA", "NSW"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["SA", "V"])

mapColouringProblem.addConstraint(AllDifferentConstraint(),["WA", "NT"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["NT", "Q"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["Q", "NSW"])
mapColouringProblem.addConstraint(AllDifferentConstraint(),["NSW", "V"])

solution = mapColouringProblem.getSolution()
print(solution)

solutions = mapColouringProblem.getSolutions()
print(len(solutions))

def getRegionsFromFile(fileName):
  f1 = open(fileName, "r")
  lines = f1.readlines()
  regionList = []
  for line in lines:
    region = line.split("#")[0]
    regionList.append(region)
  return regionList

def getNeighbourPairs(fileName):
  f1 = open(fileName, "r")
  lines = f1.readlines()
  pairsList = []
  for line in lines:
    region = line.split("#")[0]
    neighbours = line.split("#")[1].split(",")
    for neighbour in neighbours:
      noNeighbour = neighbour.replace("\n","")
      if noNeighbour == "":
        continue
      pair = [region, neighbour.replace("\n","")]
      pairsList.append(pair)
  return pairsList

#colourList = ["RED", "GREEN", "BLUE", "YELLOW"]
fileName = "Neighbours.txt"
colourList = ["RED", "GREEN", "BLUE"]
regionsList = getRegionsFromFile(fileName)
pairsList = getNeighbourPairs(fileName)

mapColouringFromFile = Problem()
mapColouringFromFile.addVariables(regionsList, colourList)
for pair in pairsList:
  mapColouringFromFile.addConstraint(AllDifferentConstraint(),pair)

solution = mapColouringFromFile.getSolution()
print(solution)

fileName = "Romania.txt"
colourList = ["RED", "GREEN", "BLUE"]
regionsList = getRegionsFromFile(fileName)
pairsList = getNeighbourPairs(fileName)

mapColouringRomaniaFromFile = Problem()
mapColouringRomaniaFromFile.addVariables(regionsList, colourList)
for pair in pairsList:
  mapColouringRomaniaFromFile.addConstraint(AllDifferentConstraint(),pair)

solution = mapColouringRomaniaFromFile.getSolution()
print(solution)

solutions = mapColouringRomaniaFromFile.getSolutions()
print(len(solutions))