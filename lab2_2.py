# -*- coding: utf-8 -*-
"""AI_lab2_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17oe0bq4TpvliEpAlh2zekWWHLHJ1dj0f
"""

from queue import Queue

romaniaMap = {
    'Arad': [('Sibiu', 140), ('Zerind', 75), ('Timisoara', 118)],
    'Zerind': [('Arad', 75), ('Oradea', 71)],
    'Oradea': [('Zerind', 71), ('Sibiu', 151)],
    'Sibiu': [('Arad', 140), ('Oradea', 151), ('Fagaras', 99), ('Rimnicu', 80)],
    'Timisoara': [('Arad', 118), ('Lugoj', 111)],
    'Lugoj': [('Timisoara', 111), ('Mehadia', 70)],
    'Mehadia': [('Lugoj', 70), ('Drobeta', 75)],
    'Drobeta': [('Mehadia', 75), ('Craiova', 120)],
    'Craiova': [('Drobeta', 120), ('Rimnicu', 146), ('Pitesti', 138)],
    'Rimnicu': [('Sibiu', 80), ('Craiova', 146), ('Pitesti', 97)],
    'Fagaras': [('Sibiu', 99), ('Bucharest', 211)],
    'Pitesti': [('Rimnicu', 97), ('Craiova', 138), ('Bucharest', 101)],
    'Bucharest': [('Fagaras', 211), ('Pitesti', 101), ('Giurgiu', 90), ('Urziceni', 85)],
    'Giurgiu': [('Bucharest', 90)],
    'Urziceni': [('Bucharest', 85), ('Vaslui', 142), ('Hirsova', 98)],
    'Hirsova': [('Urziceni', 98), ('Eforie', 86)],
    'Eforie': [('Hirsova', 86)],
    'Vaslui': [('Iasi', 92), ('Urziceni', 142)],
    'Iasi': [('Vaslui', 92), ('Neamt', 87)],
    'Neamt': [('Iasi', 87)]
}

def get_neighbors(city):
    return romaniaMap.get(city, [])

def bfs(startingNode, destinationNode):
    visited = {}
    parent = {}
    distance = {}
    queue = Queue()

    queue.put(startingNode)
    visited[startingNode] = True
    parent[startingNode] = None
    distance[startingNode] = 0

    while not queue.empty():
        currentCity = queue.get()

        if currentCity == destinationNode:
            # Reconstruct the path from startingNode to destinationNode
            path = []
            total_distance = distance[destinationNode]
            while currentCity is not None:
                path.append(currentCity)
                currentCity = parent[currentCity]
            path.reverse()
            return path, total_distance

        for neighbor, dist in get_neighbors(currentCity):
            if neighbor not in visited:
                queue.put(neighbor)
                visited[neighbor] = True
                parent[neighbor] = currentCity
                distance[neighbor] = distance[currentCity] + dist

    print("Destination not reachable")
    return None, None

# Starting city and destination city
path, total_distance = bfs('Arad', 'Bucharest')
if path:
    print("Path:", path)
    print("Total Distance:", total_distance)

from collections import deque

def dfs(startingNode, destinationNode):
    # For keeping track of what we have visited
    visited = {}
    # Keep track of distance
    distance = {}
    # Parent node of specific graph
    parent = {}

    dfs_traversal_output = []
    # DFS is stack based so using 'deque' from python built-in
    stack = deque()

    # Initialize cities
    for city in romaniaMap.keys():
        visited[city] = False
        parent[city] = None
        distance[city] = -1

    # Start from the starting city
    visited[startingNode] = True
    distance[startingNode] = 0
    stack.append(startingNode)

    while len(stack) != 0:
        u = stack.pop()  # Get the last element added to the stack
        dfs_traversal_output.append(u)

        # If we reached the destination
        if u == destinationNode:
            break

        # Explore adjacent cities
        for (v, d) in romaniaMap[u]:
            if not visited[v]:
                visited[v] = True
                parent[v] = u
                distance[v] = distance[u] + d
                stack.append(v)

    # If the destination was not reached
    if not visited[destinationNode]:
        print(f"Destination {destinationNode} not reachable from {startingNode}.")
        return

    # Reconstruct the path to the destination city
    path = []
    g = destinationNode
    while g is not None:
        path.append(g)
        g = parent[g]

    path.reverse()
    # Print the path and the total distance
    print("Path:",path)
    print("Total Distance:", distance[destinationNode])

# Example usage
dfs('Arad', 'Bucharest')