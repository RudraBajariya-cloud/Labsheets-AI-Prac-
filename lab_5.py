# -*- coding: utf-8 -*-
"""AI_LABSHEET5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WvCougydhEvVpUfrg3xsxJp4BUPE_jZg
"""

MAX, MIN = 1000, -1000

#(Initially called for root and maximizer)
def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta, branching, maxDepth):
  if depth == maxDepth:
    return values[nodeIndex]
  if maximizingPlayer:
    best = MIN
    for i in range(0, branching):
      val = minimax(depth + 1, nodeIndex * 2 + i, False, values, alpha, beta, branching, maxDepth)
      best = max(best, val)
      alpha = max(alpha, best)
      if beta <= alpha:
        break
    return best
  else:
    best = MAX
    for i in range(0, branching):
      val = minimax(depth + 1, nodeIndex * 2 + i, True, values, alpha, beta, branching, maxDepth)
      best = min(best, val)
      beta = min(beta, best)
      if beta <= alpha:
        break
    return best

b = 2
maxDepth = 3
values = [3, 5, 6, 9, 1, 2, 0, -1]
print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX, b, maxDepth))

b = 4
maxDepth = 2
values = [3, 5, 6, 9, 1, 2, 0, -1, -3, -5, -6, -9, -1, -2, 0, 1]
print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX, b, maxDepth))

#Homework:
#1. Read branching factor, max Depth, etc. from a file
#2. Find out the number of leaf nodes / internal nodes which are pruned.
#3. To do ideal ordering of the leaf nodes to maximize the pruning.

